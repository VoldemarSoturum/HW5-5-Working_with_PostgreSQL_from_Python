# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ¬´–†–∞–±–æ—Ç–∞ —Å PostgreSQL –∏–∑ Python¬ª


# –ó–∞–¥–∞–Ω–∏–µ

# –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–∞ Python.–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö:

#     –∏–º—è
#     —Ñ–∞–º–∏–ª–∏—è
#     email
#     —Ç–µ–ª–µ—Ñ–æ–Ω

# –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —É –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–¥–∏–Ω, –∞ –¥–≤–∞, —Ç—Ä–∏ –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ. –ê –º–æ–∂–µ—Ç –∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –µ–≥–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å.

# –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ Python –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.

#     –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î (—Ç–∞–±–ª–∏—Ü—ã).
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ.
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
#     –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–º: –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–Ω–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã.

# –¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

# –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç .py —Ñ–∞–π–ª.




import psycopg2
import re
from email_validator import validate_email, EmailNotValidError
import phonenumbers
from phonenumbers import NumberParseException

REGIONS = {
    "1": "RU",  # –†–æ—Å—Å–∏—è
    "2": "US",  # –°–®–ê
    "3": "UA",  # –£–∫—Ä–∞–∏–Ω–∞
    "4": "BY",  # –ë–µ–ª–∞—Ä—É—Å—å
}

def create_db(conn):
    with conn.cursor() as cur:
        cur.execute("DROP TABLE IF EXISTS phones; DROP TABLE IF EXISTS clients;")
        cur.execute("""
            CREATE TABLE clients (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(50) NOT NULL CHECK (TRIM(first_name) <> ''),
                last_name VARCHAR(50) NOT NULL CHECK (TRIM(last_name) <> ''),
                email VARCHAR(100) UNIQUE NOT NULL CHECK (TRIM(email) <> '')
            );
        """)
        cur.execute("""
            CREATE TABLE phones (
                id SERIAL PRIMARY KEY,
                client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
                phone VARCHAR(20) NOT NULL CHECK (TRIM(phone) <> '')
            );
        """)
        conn.commit()
        print("‚ò†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")

def select_region():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:")
    for k, v in REGIONS.items():
        print(f"{k}. {v}")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
    if choice in REGIONS:
        return REGIONS[choice]
    else:
        print("‚ò¢Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞.")
        return None

def input_phone_number():
    region_code = select_region()
    if not region_code:
        return None

    local_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 9123456789): ").strip()

    try:
        parsed_number = phonenumbers.parse(local_number, region_code)
        if not phonenumbers.is_valid_number(parsed_number):
            print("‚ò¢Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return None
        international_number = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)
        return international_number
    except NumberParseException:
        print("‚ò¢Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.")
        return None

def is_valid_email(email):
    try:
        validate_email(email)  # –ï—Å–ª–∏ email –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return True
    except EmailNotValidError as e:
        print(f"‚ò¢Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π email: {e}")
        return False

def add_client(conn):
    first = input("–ò–º—è (–Ω–µ –ø—É—Å—Ç–æ–µ): ")
    last = input("–§–∞–º–∏–ª–∏—è (–Ω–µ –ø—É—Å—Ç–æ–µ): ")
    email = input("Email (–Ω–µ –ø—É—Å—Ç–æ–µ): ")
    MAX_PHONE_LENGTH = 20  # –∫–∞–∫ –≤ –ë–î

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ email –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
    if not first.strip() or not last.strip() or not email.strip():
        print("‚ò¢Ô∏è –ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return

    if not is_valid_email(email):
        print("‚ò¢Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.")
        return

    phone_list = []
    add_phone_choice = input("–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω? (y/n): ").strip().lower()
    if add_phone_choice == 'y':
        while True:
            international_number = input_phone_number()
            if international_number:
                phone_list.append(international_number)
            more = input("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –Ω–æ–º–µ—Ä? (y/n): ").strip().lower()
            if more != 'y':
                break

    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO clients (first_name, last_name, email)
            VALUES (%s, %s, %s) RETURNING id;
        """, (first, last, email))
        client_id = cur.fetchone()[0]

        for phone in phone_list:
            if not phone:
                print("‚ò¢Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
                continue
            if len(phone) > MAX_PHONE_LENGTH:
                print(f"‚ò¢Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: '{phone}' (–º–∞–∫—Å–∏–º—É–º {MAX_PHONE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
                continue

            cur.execute("INSERT INTO phones (client_id, phone) VALUES (%s, %s);", (client_id, phone))

        conn.commit()
        print(f"‚ò†Ô∏è –ö–ª–∏–µ–Ω—Ç {first} {last} –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {client_id}.")

def add_phone(conn):
    client_id = input("ID –∫–ª–∏–µ–Ω—Ç–∞: ").strip()
    phone = input_phone_number()
    if not phone:
        print("‚ò¢Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
        return

    with conn.cursor() as cur:
        cur.execute("INSERT INTO phones (client_id, phone) VALUES (%s, %s);", (client_id, phone))
        conn.commit()
        print("‚ò†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω.")

def update_client(conn):
    client_id = input("ID –∫–ª–∏–µ–Ω—Ç–∞: ").strip()
    first = input("–ù–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å): ").strip()
    last = input("–ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å): ").strip()
    email = input("–ù–æ–≤—ã–π email (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å): ").strip()

    if first and not first.strip():
        print("‚ò¢Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    if last and not last.strip():
        print("‚ò¢Ô∏è –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    if email and not email.strip():
        print("‚ò¢Ô∏è Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if email and not is_valid_email(email):
        return

    with conn.cursor() as cur:
        if first:
            cur.execute("UPDATE clients SET first_name = %s WHERE id = %s;", (first, client_id))
        if last:
            cur.execute("UPDATE clients SET last_name = %s WHERE id = %s;", (last, client_id))
        if email:
            cur.execute("UPDATE clients SET email = %s WHERE id = %s;", (email, client_id))
        conn.commit()
        print("‚ò†Ô∏è –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def delete_phone(conn):
    client_id = input("ID –∫–ª–∏–µ–Ω—Ç–∞: ").strip()
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
    with conn.cursor() as cur:
        cur.execute("DELETE FROM phones WHERE client_id = %s AND phone = %s;", (client_id, phone))
        conn.commit()
        print("‚ò†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —É–¥–∞–ª—ë–Ω.")

def delete_client(conn):
    client_id = input("ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
    with conn.cursor() as cur:
        cur.execute("DELETE FROM clients WHERE id = %s;", (client_id,))
        conn.commit()
        print("‚ò†Ô∏è –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")

def find_client(conn):
    print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏):")
    first = input("–ò–º—è: ").strip()
    last = input("–§–∞–º–∏–ª–∏—è: ").strip()
    email = input("Email: ").strip()
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()

    query = """
        SELECT c.id, c.first_name, c.last_name, c.email, p.phone
        FROM clients c
        LEFT JOIN phones p ON c.id = p.client_id
        WHERE TRUE
    """
    params = []
    if first:
        query += " AND c.first_name = %s"
        params.append(first)
    if last:
        query += " AND c.last_name = %s"
        params.append(last)
    if email:
        query += " AND c.email = %s"
        params.append(email)
    if phone:
        query += " AND p.phone = %s"
        params.append(phone)

    with conn.cursor() as cur:
        cur.execute(query, tuple(params))
        rows = cur.fetchall()
        if not rows:
            print("‚ò¢Ô∏è –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            print("üßø –ù–∞–π–¥–µ–Ω–æ:")
            for row in rows:
                print(row)

def show_all_clients(conn):
    with conn.cursor() as cur:
        cur.execute("""
            SELECT c.id, c.first_name, c.last_name, c.email, COALESCE(string_agg(p.phone, ', '), '‚Äî') AS phones
            FROM clients c
            LEFT JOIN phones p ON c.id = p.client_id
            GROUP BY c.id
            ORDER BY c.id;
        """)
        rows = cur.fetchall()
        if not rows:
            print("‚ò¢Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        else:
            print("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:")
            for row in rows:
                client_id, first_name, last_name, email, phones = row
                print(f"ID: {client_id}, {first_name} {last_name}, Email: {email}, –¢–µ–ª–µ—Ñ–æ–Ω—ã: {phones}")

# –ú–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def main():
    # –£—Å—Ç–∞–Ω–æ–≤rf —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
    conn = psycopg2.connect(
        dbname="netology_db",   # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user="postgres",        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password="postgres",    # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        host="localhost",       # –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Docker –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç localhost)
        port="5432"             # –ü–æ—Ä—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)
    )

    while True:
        print("\nüìú –ú–µ–Ω—é:")
        print("1. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        print("3. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")
        print("5. –£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞")
        print("6. –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        print("7. –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
        print("8. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–æ—Ä: ").strip()

        try:
            if choice == "1":
                create_db(conn)
            elif choice == "2":
                add_client(conn)
            elif choice == "3":
                add_phone(conn)
            elif choice == "4":
                update_client(conn)
            elif choice == "5":
                delete_phone(conn)
            elif choice == "6":
                delete_client(conn)
            elif choice == "7":
                find_client(conn)
            elif choice == "8":
                show_all_clients(conn)
            elif choice == "0":
                print("ü§ò –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                break
            else:
                print("üíÄ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        except psycopg2.errors.StringDataRightTruncation:
            print("‚ò¢Ô∏è –û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª–µ–π.")
        except Exception as e:
            print("‚ò¢Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", e)


if __name__ == "__main__":
    main()
